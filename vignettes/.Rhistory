tmp_3[is.na(tmp_3$`cumsum(data_t).y`),3]
tmp_3[is.na(tmp_3$`cumsum(data_t).x`),2] <- 0
tmp_3[is.na(tmp_3$`cumsum(data_t).y`),3] <- 0
tmp_3
tmp_3 <- merge(x=ct_seq_param2, y=ct_seq_param_ctrl2, by="score", all=TRUE, sort = TRUE)
tmp_3 <- tmp_3[order(tmp_3$score, decreasing = TRUE),]
tmp_3
tmp_3[is.na(tmp_3$`cumsum(data_t).x`),2] <- 0
tmp_3[is.na(tmp_3$`cumsum(data_t).y`),3] <- 0
tmp_3$nBg <- tmp_3$`cumsum(data_t).y`/as.numeric(tail(tmp_3$`cumsum(data_t).y`,1))
tmp_3$nFg <- tmp_3$`cumsum(data_t).x`/as.numeric(tail(tmp_3$`cumsum(data_t).x`,1))
tmp_3$fdr <- tmp_3$nBg+0.01/tmp_3$nFg+0.01 #nBg/nFg  @@@todo : I added o.o1 to avoid 0 in the Foreground
tmp_3
ct_seq_param_ctrl
myGrangesBaseCSVWithSeq <- BaseCSV_granges_filtAT
myGrangesBaseCSVWithSeq_control <- BaseCSV_granges_filt1
ct_seq_param <- DNAModAnnot:::.GetCumsumTableParamByMotif(grangesDataWithSeq = myGrangesBaseCSVWithSeq,
cNameParamToTest = "score", nRoundDigits = 1,
lTestBetweenMotifs=FALSE)
ct_seq_param_ctrl <- DNAModAnnot:::.GetCumsumTableParamByMotif(grangesDataWithSeq = myGrangesBaseCSVWithSeq_control,
cNameParamToTest = "score", nRoundDigits = 1,
lTestBetweenMotifs=FALSE)
ct_seq_param_ctrl
ct_seq_param
#################
ct_seq_param2 <- ct_seq_param
ct_seq_param_ctrl2 <- ct_seq_param_ctrl
ct_seq_param_ctrl2
tmp_3
tmp_3 <- merge(x=ct_seq_param2, y=ct_seq_param_ctrl2, by="score", all=TRUE, sort = TRUE)
tmp_3 <- tmp_3[order(tmp_3$score, decreasing = TRUE),]
tmp_3[is.na(tmp_3$`cumsum(data_t).x`),2] <- 0
tmp_3[is.na(tmp_3$`cumsum(data_t).y`),3] <- 0
tmp_3$nBg <- tmp_3$`cumsum(data_t).y`/as.numeric(tail(tmp_3$`cumsum(data_t).y`,1))
tmp_3$nFg <- tmp_3$`cumsum(data_t).x`/as.numeric(tail(tmp_3$`cumsum(data_t).x`,1))
tmp_3
tmp_3$fdr <- tmp_3$nBg+0.01/tmp_3$nFg+0.01 #nBg/nFg  @@@todo : I added o.o1 to avoid 0 in the Foreground
tmp_3 <- merge(x=ct_seq_param2, y=ct_seq_param_ctrl2, by="score", all=TRUE, sort = TRUE)
#################
ct_seq_param2 <- ct_seq_param
ct_seq_param_ctrl2 <- ct_seq_param_ctrl
ct_seq_param2$score <- as.numeric(rownames(ct_seq_param2))
ct_seq_param_ctrl2$score <- as.numeric(rownames(ct_seq_param_ctrl2))
tmp_3 <- merge(x=ct_seq_param2, y=ct_seq_param_ctrl2, by="score", all=TRUE, sort = TRUE)
tmp_3 <- tmp_3[order(tmp_3$score, decreasing = TRUE),]
tmp_3[is.na(tmp_3$`cumsum(data_t).x`),2] <- 0
tmp_3[is.na(tmp_3$`cumsum(data_t).y`),3] <- 0
tmp_3$nBg <- tmp_3$`cumsum(data_t).y`/as.numeric(tail(tmp_3$`cumsum(data_t).y`,1))
tmp_3$nFg <- tmp_3$`cumsum(data_t).x`/as.numeric(tail(tmp_3$`cumsum(data_t).x`,1))
tmp_3
tmp_3$fdr <- tmp_3$nBg+0.01/tmp_3$nFg+0.01 #nBg/nFg  @@@todo : I added o.o1 to avoid 0 in the Foreground
tmp_3
tmp_3$fdr <- tmp_3$nBg/tmp_3$nFg #nBg/nFg  @@@todo : I added o.o1 to avoid 0 in the Foreground
tmp_3
if( any(tmp_3$fdr>1) ){ tmp_3$fdr[tmp_3$fdr>1,"fdr"] = 1 }
if( any(tmp_3$fdr>1) ){ tmp_3$fdr[tmp_3$fdr>1,6] = 1 }
tmp_3$fdr[tmp_3$fdr>1,6]
tmp_3$fdr
tmp_3$fdr[tmp_3$fdr>1]
if( any(tmp_3$fdr>1) ){ tmp_3$fdr[tmp_3$fdr>1] = 1 }
tmp_3$fdr
rev(tmp_3$fdr)
fdr <- rev(tmp_3$fdr)
fdr <- data.frame(fdr=fdr)
colnames(fdr) <- "fdr"
fdr
fdr <- rev(tmp_3$fdr)
fdr <- data.frame(fdr=fdr,
threshold=tmp_3$score)
colnames(fdr) <- "fdr"
fdr
fdr$threshold <- tmp_3$score
fdr
fdr$fdr_cummin <- cummin(fdr$fdr)
fdr
#################
ct_seq_param2 <- ct_seq_param
ct_seq_param_ctrl2 <- ct_seq_param_ctrl
ct_seq_param2$score <- as.numeric(rownames(ct_seq_param2))
ct_seq_param_ctrl2$score <- as.numeric(rownames(ct_seq_param_ctrl2))
tmp_3 <- merge(x=ct_seq_param2, y=ct_seq_param_ctrl2, by="score", all=TRUE, sort = TRUE)
tmp_3 <- tmp_3[order(tmp_3$score, decreasing = TRUE),]
tmp_3[is.na(tmp_3$`cumsum(data_t).x`),2] <- 0
tmp_3[is.na(tmp_3$`cumsum(data_t).y`),3] <- 0
tmp_3$nBg <- tmp_3$`cumsum(data_t).y`/as.numeric(tail(tmp_3$`cumsum(data_t).y`,1))
tmp_3$nFg <- tmp_3$`cumsum(data_t).x`/as.numeric(tail(tmp_3$`cumsum(data_t).x`,1))
fdr <- tmp_3$nBg/tmp_3$nFg
fdr
if( any(tmp_3$fdr>1) ){ tmp_3$fdr[tmp_3$fdr>1] = 1 }
fdr <- rev(fdr)
fdr <- data.frame(fdr=fdr)
colnames(fdr) <- "fdr"
fdr <- data.frame(fdr=fdr)
fdr
fdr <- tmp_3$nBg/tmp_3$nFg
if( any(tmp_3$fdr>1) ){ tmp_3$fdr[tmp_3$fdr>1] = 1 }
fdr <- rev(fdr)
fdr <- data.frame(fdr=fdr)
fdr
#colnames(fdr) <- "fdr" #@@@to check: Useless?
fdr$threshold <- rev(tmp_3$score)
fdr$fdr_cummin <- cummin(fdr$fdr)
fdr
#################
ct_seq_param2 <- ct_seq_param
ct_seq_param_ctrl2 <- ct_seq_param_ctrl
ct_seq_param2$score <- as.numeric(rownames(ct_seq_param2))
ct_seq_param_ctrl2$score <- as.numeric(rownames(ct_seq_param_ctrl2))
tmp_3 <- merge(x=ct_seq_param2, y=ct_seq_param_ctrl2, by="score", all=TRUE, sort = TRUE)
tmp_3 <- tmp_3[order(tmp_3$score, decreasing = TRUE),]
tmp_3[is.na(tmp_3$`cumsum(data_t).x`),2] <- 0
tmp_3[is.na(tmp_3$`cumsum(data_t).y`),3] <- 0
tmp_3$nBg <- tmp_3$`cumsum(data_t).y`/as.numeric(tail(tmp_3$`cumsum(data_t).y`,1))
tmp_3$nFg <- tmp_3$`cumsum(data_t).x`/as.numeric(tail(tmp_3$`cumsum(data_t).x`,1))
fdr <- tmp_3$nBg/tmp_3$nFg
if( any(tmp_3$fdr>1) ){ tmp_3$fdr[tmp_3$fdr>1] = 1 }
fdr <- rev(fdr)
fdr <- data.frame(fdr=fdr)
#colnames(fdr) <- "fdr" #@@@to check: Useless?
fdr$threshold <- rev(tmp_3$score)
fdr$fdr_cummin <- cummin(fdr$fdr)
fdr
fdr <- tmp_3$nBg/tmp_3$nFg
if( any(fdr>1) ){ fdr[fdr>1] = 1 }
fdr <- rev(fdr)
fdr <- data.frame(fdr=fdr)
#colnames(fdr) <- "fdr" #@@@to check: Useless?
fdr$threshold <- rev(tmp_3$score)
fdr$fdr_cummin <- cummin(fdr$fdr)
fdr
ct_seq_param$threshold <- as.numeric(rownames(ct_seq_param))
ct_seq_param_ctrl$threshold <- as.numeric(rownames(ct_seq_param_ctrl))
ct_seq_param_merged <-
merge(x=ct_seq_param2,
y=ct_seq_param_ctrl2,
by="threshold", all=TRUE, sort = TRUE)
ct_seq_param_merged <-
merge(x=ct_seq_param,
y=ct_seq_param_ctrl,
by="threshold", all=TRUE, sort = TRUE)
ct_seq_param_merged <-
ct_seq_param_merged[order(ct_seq_param_merged$threshold, decreasing = TRUE),]
ct_seq_param_merged[is.na(ct_seq_param_merged[,2]),2] <- 0
ct_seq_param_merged[is.na(ct_seq_param_merged[,3]),3] <- 0
ct_seq_param_merged
row.names(ct_seq_param_merged) <- ct_seq_param_merged$threshold
ct_seq_param_merged
mCounts <-
merge(x=ct_seq_param,
y=ct_seq_param_ctrl,
by="threshold", all=TRUE, sort = TRUE)
mCounts <-
mCounts[order(mCounts$threshold, decreasing = TRUE),]
row.names(mCounts) <- mCounts$threshold
mCounts[is.na(mCounts[,2]),2] <- 0
mCounts[is.na(mCounts[,3]),3] <- 0
nFg <- mCounts[,2]/as.numeric(tail(mCounts[,2],1))
nBg <- mCounts[,3]/as.numeric(tail(mCounts[,3],1))
row.names(fdr)
fdr <- nBg/nFg
fdr
if( any(fdr>1) ){ fdr[fdr>1] = 1 }
fdr <- rev(fdr)
fdr
fdr <- data.frame(fdr=fdr)
fdr
nFg
nFg
mCounts
nFg <- data.frame(mCounts[,2]/as.numeric(tail(mCounts[,2],1)))
nFg
nFg <- matrix(mCounts[,2]/as.numeric(tail(mCounts[,2],1)))
nFg <- mCounts[,2]
nFg
nFg <- mCounts[,]
nFg
mCounts$nFg
mCounts$nFg <- mCounts[,2]/as.numeric(tail(mCounts[,2],1))
mCounts$nBg <- mCounts[,3]/as.numeric(tail(mCounts[,3],1))
mCounts$nFg
fdr <- mCounts$nBg/mCounts$nFg
if( any(fdr>1) ){ fdr[fdr>1] = 1 }
fdr <- rev(fdr)
fdr <- data.frame(fdr=fdr)
#colnames(fdr) <- "fdr" #@@@to check: Useless?
fdr$threshold <- as.numeric(row.names(fdr))
fdr
myGrangesBaseCSVWithSeq <- BaseCSV_granges_filtAT
myGrangesBaseCSVWithSeq_control <- BaseCSV_granges_filt1
devtools::install("D:/WORK/SD_Lab/DNAModAnnot_Working_Directory/DNAModAnnot")
library(DNAModAnnot)
myGrangesBaseCSVWithSeq <- BaseCSV_granges_filtAT
myGrangesBaseCSVWithSeq_control <- BaseCSV_granges_filt1
#FDR estimation versus granges control
myFdr_score_vsCtrl_list <-
GetFdrEstListByThresh(grangesDataWithSeq = myGrangesBaseCSVWithSeq,
grangesDataWithSeqControl = myGrangesBaseCSVWithSeq_control,
cNameParamToTest = "score",
nRoundDigits = 1)
myFdr_score_vsCtrl_list
# Motif FDR estimation for each motif over-represented (at least % of motifs)
BaseCSV_granges_filt1 <- as(PacBioCSV_gpos_filt1[PacBioCSV_gpos_filt1$base == "A"], "GRanges")
BaseCSV_granges_with_sequence <- GetGRangesWindowSeqandParam(
grangesData = BaseCSV_granges_filt1,
grangesGenome = ptetraurelia_genome_range,
dnastringsetGenome = ptetraurelia_genome,
nUpstreamBpToAdd = 0,
nDownstreamBpToAdd = 1
)
score_fdr_by_motif_list <- GetFdrEstListByThresh(
grangesDataWithSeq = BaseCSV_granges_with_sequence,
grangesDataWithSeqControl = NULL,
cNameParamToTest = "score",
nRoundDigits = 1,
cModMotifsAsForeground = motif_pct_and_PacBioGFF_grangeslist$motifs_to_analyse
)
score_fdr_by_motif_limit <- GetFdrBasedThreshLimit(myFdr_score_vsCtrl_list,
nFdrPropForFilt = 0.05,
lUseBestThrIfNoFdrThr = TRUE
)
score_fdr_by_motif_limit <- GetFdrBasedThreshLimit(myFdr_score_vsCtrl_list,
nFdrPropForFilt = 0.05,
lUseBestThrIfNoFdrThr = FALSE
)
score_fdr_by_motif_limit
rm(thresList)
rm(nFg)
score_fdr_by_motif_list <- GetFdrEstListByThresh(
grangesDataWithSeq = BaseCSV_granges_with_sequence,
grangesDataWithSeqControl = NULL,
cNameParamToTest = "score",
nRoundDigits = 1,
cModMotifsAsForeground = motif_pct_and_PacBioGFF_grangeslist$motifs_to_analyse
)
devtools::install("D:/WORK/SD_Lab/DNAModAnnot_Working_Directory/DNAModAnnot")
library(DNAModAnnot)
BaseCSV_granges_with_sequence
motif_pct_and_PacBioGFF_grangeslist$motifs_to_analyse
score_fdr_by_motif_list <- GetFdrEstListByThresh(
grangesDataWithSeq = BaseCSV_granges_with_sequence,
grangesDataWithSeqControl = NULL,
cNameParamToTest = "score",
nRoundDigits = 1,
cModMotifsAsForeground = motif_pct_and_PacBioGFF_grangeslist$motifs_to_analyse
)
devtools::install("D:/WORK/SD_Lab/DNAModAnnot_Working_Directory/DNAModAnnot")
library(DNAModAnnot)
score_fdr_by_motif_list <- GetFdrEstListByThresh(
grangesDataWithSeq = BaseCSV_granges_with_sequence,
grangesDataWithSeqControl = NULL,
cNameParamToTest = "score",
nRoundDigits = 1,
cModMotifsAsForeground = motif_pct_and_PacBioGFF_grangeslist$motifs_to_analyse
)
score_fdr_by_motif_list
devtools::install("D:/WORK/SD_Lab/DNAModAnnot_Working_Directory/DNAModAnnot")
devtools::install("D:/WORK/SD_Lab/DNAModAnnot_Working_Directory/DNAModAnnot")
library(DNAModAnnot)
score_fdr_by_motif_list <- GetFdrEstListByThresh(
grangesDataWithSeq = BaseCSV_granges_with_sequence,
grangesDataWithSeqControl = NULL,
cNameParamToTest = "score",
nRoundDigits = 1,
cModMotifsAsForeground = motif_pct_and_PacBioGFF_grangeslist$motifs_to_analyse
)
score_fdr_by_motif_list
View(score_fdr_by_motif_list)
View(score_fdr_by_motif_list[["FDRe_AA"]])
View(score_fdr_by_motif_list[["FDRe_AG"]])
devtools::install("D:/WORK/SD_Lab/DNAModAnnot_Working_Directory/DNAModAnnot")
library(DNAModAnnot)
score_fdr_by_motif_list <- GetFdrEstListByThresh(
grangesDataWithSeq = BaseCSV_granges_with_sequence,
grangesDataWithSeqControl = NULL,
cNameParamToTest = "score",
nRoundDigits = 1,
cModMotifsAsForeground = motif_pct_and_PacBioGFF_grangeslist$motifs_to_analyse
)
View(score_fdr_by_motif_list)
View(score_fdr_by_motif_list[["FDRe_AG"]])
View(score_fdr_by_motif_list[["FDRe_AT"]])
score_fdr_by_motif_limit <- GetFdrBasedThreshLimit(score_fdr_by_motif_list,
nFdrPropForFilt = 0.05,
lUseBestThrIfNoFdrThr = TRUE
)
score_fdr_by_motif_limit
DrawFdrEstList(
listFdrEstByThr = score_fdr_by_motif_list,
cNameParamToTest = "score",
nFdrPropForFilt = 0.05
)
score_fdr_by_motif_limit <- GetFdrBasedThreshLimit(myFdr_score_vsCtrl_list,
nFdrPropForFilt = 0.05,
lUseBestThrIfNoFdrThr = FALSE
)
score_fdr_by_motif_limit
#FDR estimation versus granges control
myFdr_score_vsCtrl_list <-
GetFdrEstListByThresh(grangesDataWithSeq = myGrangesBaseCSVWithSeq,
grangesDataWithSeqControl = myGrangesBaseCSVWithSeq_control,
cNameParamToTest = "score",
nRoundDigits = 1)
myFdr_score_vsCtrl_list
#FDR estimation versus granges control
myFdr_score_vsCtrl_list <-
GetFdrEstListByThresh(grangesDataWithSeq = myGrangesBaseCSVWithSeq,
grangesDataWithSeqControl = myGrangesBaseCSVWithSeq_control,
cNameParamToTest = "score",
nRoundDigits = 1)
myFdr_score_vsCtrl_list
devtools::install("D:/WORK/SD_Lab/DNAModAnnot_Working_Directory/DNAModAnnot")
library(DNAModAnnot)
myGrangesBaseCSVWithSeq <- BaseCSV_granges_filtAT
myGrangesBaseCSVWithSeq_control <- BaseCSV_granges_filt1
#FDR estimation versus granges control
myFdr_score_vsCtrl_list <-
GetFdrEstListByThresh(grangesDataWithSeq = myGrangesBaseCSVWithSeq,
grangesDataWithSeqControl = myGrangesBaseCSVWithSeq_control,
cNameParamToTest = "score",
nRoundDigits = 1)
myFdr_score_vsCtrl_list
score_fdr_by_motif_limit <- GetFdrBasedThreshLimit(myFdr_score_vsCtrl_list,
nFdrPropForFilt = 0.05,
lUseBestThrIfNoFdrThr = FALSE
)
score_fdr_by_motif_limit
# merge RNA-seq data with Annotation GRanges object
annotations_range_ModBase_counts_param <- annotations_range_ModBase_counts
GenomicRanges::mcols(annotations_range_ModBase_counts_param) <- merge(
x = GenomicRanges::mcols(annotations_range_ModBase_counts_param),
by.x = "Name",
y = expression_dataframe,
by.y = "ID"
)#@@@todo: not good bug: maybe because datasets should be filtered for the right scaffolds before
# merge RNA-seq data with Annotation GRanges object
genes_range_ModBase_counts_param <- annotations_range_ModBase_counts[annotations_range_ModBase_counts$type == "gene"]
GenomicRanges::mcols(genes_range_ModBase_counts_param) <- merge(
x = GenomicRanges::mcols(genes_range_ModBase_counts_param),
by.x = "Name",
y = expression_dataframe,
by.y = "ID"
)#@@@todo: not good bug: maybe because datasets should be filtered for the right scaffolds before
GenomicRanges::mcols(genes_range_ModBase_counts_param) <- merge(
x = GenomicRanges::mcols(genes_range_ModBase_counts_param),
by.x = "Name",
y = expression_dataframe,
by.y = "ID"
)
# Comparison of quantitative parameter with Mod annotation
DrawParamPerModBaseCategories(
grangesAnnotationsWithCounts = genes_range_ModBase_counts_param,
cParamColname = "T30",
cParamFullName = "Gene expression at T30",
cParamYLabel = "Normalized RNA-seq read counts (T30)",
cSelectFeature = "gene",
lUseCountsPerkbp = TRUE,
cBaseMotif = motifs_base,
cModMotif = motifs_modifications,
lBoxPropToCount = FALSE
)
# merge RNA-seq data with Annotation GRanges object
genes_range_ModBase_counts_param <- annotations_range_ModBase_counts[annotations_range_ModBase_counts$type == "gene"]
GenomicRanges::mcols(genes_range_ModBase_counts_param) <- merge(
x = GenomicRanges::mcols(genes_range_ModBase_counts_param),
by.x = "Name",
y = expression_dataframe,
by.y = "ID"
)
# Comparison of quantitative parameter with Mod annotation
DrawParamPerModBaseCategories(
grangesAnnotationsWithCounts = genes_range_ModBase_counts_param,
cParamColname = "T30",
cParamFullName = "Gene expression at T30",
cParamYLabel = "Normalized RNA-seq read counts (T30)",
cSelectFeature = "gene",
lUseCountsPerkbp = TRUE,
cBaseMotif = motifs_base,
cModMotif = motifs_modifications,
lBoxPropToCount = FALSE
)
?Gviz::AnnotationTrack
# merge RNA-seq data with Annotation GRanges object
genes_range_ModBase_counts_param <- annotations_range_ModBase_counts[annotations_range_ModBase_counts$type == "gene"]
GenomicRanges::mcols(genes_range_ModBase_counts_param) <- merge(
x = GenomicRanges::mcols(genes_range_ModBase_counts_param),
by.x = "Name",
y = expression_dataframe,
by.y = "ID"
)
# ModBase distance from feature/feature limit
Mod_distance_feature_countslist <- GetDistFromFeaturePos(
grangesAnnotations = annotations_range,
cSelectFeature = "gene",
grangesData = PacBioGFF_granges_filtAT,
lGetGRangesInsteadOfListCounts = FALSE,
lGetPropInsteadOfCounts = TRUE,
cWhichStrandVsFeaturePos = "both", nWindowSizeAroundFeaturePos = 600,
lAddCorrectedDistFrom5pTo3p = TRUE,
cFeaturePosNames = c("TSS", "TTS")
)
# ModBase distance from feature/feature limit
Mod_distance_feature_countslist <- GetDistFromFeaturePos(
grangesAnnotations = annotations_range,
cSelectFeature = "gene",
grangesData = PacBioGFF_granges_filtAT,
lGetGRangesInsteadOfListCounts = FALSE,
lGetPropInsteadOfCounts = TRUE,
cWhichStrandVsFeaturePos = "both", nWindowSizeAroundFeaturePos = 600,
lAddCorrectedDistFrom5pTo3p = TRUE,
cFeaturePosNames = c("TSS", "TTS")
)
Base_distance_feature_countslist <- GetDistFromFeaturePos(
grangesAnnotations = annotations_range,
cSelectFeature = "gene",
grangesData = BaseCSV_granges_filtAT,
lGetGRangesInsteadOfListCounts = FALSE,
lGetPropInsteadOfCounts = TRUE,
cWhichStrandVsFeaturePos = "both", nWindowSizeAroundFeaturePos = 600,
lAddCorrectedDistFrom5pTo3p = TRUE,
cFeaturePosNames = c("TSS", "TTS")
)
DrawModBasePropDistFromFeature(
listModCountsDistDataframe = Mod_distance_feature_countslist,
listBaseCountsDistDataframe = Base_distance_feature_countslist,
cFeaturePosNames = c("TSS", "TTS"),
cBaseMotif = motifs_base,
cModMotif = motifs_modifications
)
#Plotting Tracks--------
Gviz::plotTracks(trackList = list(trackIdeogram, trackGenomeAxis,
trackData6mATipdRatio, trackSequence,
trackDataNuclCoverage, trackAnnotation),
chromosome = "scaffold51_17",
from = 361000, to = 365000)
AddToModBasePropDistFromFeaturePlot(
dPosCountsDistFeatureStart = bamfile_distance_feature_countslist[[1]],
dPosCountsDistFeatureEnd = bamfile_distance_feature_countslist[[2]],
cSubtitleContent = "Along with nucleosome center distance (MonoNuc_3-2newreplicate)",
cParamYLabel = "Nucleosome center count (MonoNuc_3-2newreplicate)",
cParamColor = "cyan3",
lAddAxisOnLeftSide = TRUE
)
gposDeepSignalModBase <- ImportDeepSignalModFrequency(cDeepSignalModPath="D:/WORK/SD_Lab/Nanopore_test/Notts.FAB39088-288418386-NC_000001.11_Sample.CpG.call_mods.frequency.tsv",
lSortGPos=TRUE,
cContigToBeAnalyzed = "all")
gposDeepSignalModBase <- ImportDeepSignalModFrequency(cDeepSignalModPath="D:/WORK/SD_Lab/DNAModAnnot_Working_Directory/DNAModAnnot/inst/extdata/Notts.FAB39088-288418386-NC_000001.11_Sample.CpG.call_mods.frequency.tsv",
lSortGPos=TRUE,
cContigToBeAnalyzed = "all")
gposDeepSignalModBase
#1st split
gposDeepSignalMod <- FiltDeepSignal(gposDeepSignalModBase = as(gposDeepSignalModBase, "GRanges"),
cParamNameForFilter = "frac",
lFiltParam = TRUE,
nFiltParamLoBoundaries = 0,
nFiltParamUpBoundaries = 1,
cFiltParamBoundariesToInclude = "upperOnly")$Mod
gposDeepSignalMod
mygposDeepSignalMod <- FiltDeepSignal(gposDeepSignalModBase = as(mygposDeepSignalModBase, "GRanges"),
cParamNameForFilter = "frac",
lFiltParam = TRUE,
nFiltParamLoBoundaries = 0,
nFiltParamUpBoundaries = 1,
cFiltParamBoundariesToInclude = "upperOnly")$Mod
#' to proceed but the GPos Object will require less memory.
#' @param cContigToBeAnalyzed Names of contigs for which the data will be kept.
#' If NULL, data from all contigs available will be imported. Defaults to NULL.
#' @param lKeepSequence If TRUE, the sequence of the base will be retained in one column.
#' Otherwise, it will be discarded to reduce object size. Defaults to TRUE.
#' @keywords ImportDeepSignalModFrequency
#' @export
#' @examples
#' #Loading Nanopore data
#'
mygposDeepSignalModBase <- ImportDeepSignalModFrequency(cDeepSignalModPath="D:/WORK/SD_Lab/DNAModAnnot_Working_Directory/DNAModAnnot/inst/extdata/Notts.FAB39088-288418386-NC_000001.11_Sample.CpG.call_mods.frequency.tsv",
lSortGPos=TRUE,
cContigToBeAnalyzed = "all")
mygposDeepSignalMod <- FiltDeepSignal(gposDeepSignalModBase = as(mygposDeepSignalModBase, "GRanges"),
cParamNameForFilter = "frac",
lFiltParam = TRUE,
nFiltParamLoBoundaries = 0,
nFiltParamUpBoundaries = 1,
cFiltParamBoundariesToInclude = "upperOnly")$Mod
mygposDeepSignalMod <- FiltDeepSignal(gposDeepSignalModBase = mygposDeepSignalModBase,
cParamNameForFilter = "frac",
lFiltParam = TRUE,
nFiltParamLoBoundaries = 0,
nFiltParamUpBoundaries = 1,
cFiltParamBoundariesToInclude = "upperOnly")$Mod
mygposDeepSignalMod
mygposDeepSignalMod <- FiltDeepSignal(gposDeepSignalModBase = as(mygposDeepSignalModBase, "GRanges"),
cParamNameForFilter = "frac",
lFiltParam = TRUE,
nFiltParamLoBoundaries = 0,
nFiltParamUpBoundaries = 1,
cFiltParamBoundariesToInclude = "upperOnly")$Mod
mygposDeepSignalMod
mygposDeepSignalModBase <- ImportDeepSignalModFrequency(cDeepSignalModPath="D:/WORK/SD_Lab/DNAModAnnot_Working_Directory/DNAModAnnot/inst/extdata/Notts.FAB39088-288418386-NC_000001.11_Sample.CpG.call_mods.frequency.tsv",
lSortGPos=TRUE,
cContigToBeAnalyzed = "all")
ptetraurelia_genome
ptetraurelia_genome["scaffold51_17"]
annotations_range
annotations_range[annotations_range$type =="gene"]
trackAnnotation@mapping
trackAnnotation[["mapping"]]
trackAnnotation["mapping"]
devtools::document("D:/WORK/SD_Lab/DNAModAnnot_Working_Directory/DNAModAnnot")
devtools::document("D:/WORK/SD_Lab/DNAModAnnot_Working_Directory/DNAModAnnot")
gc()
devtools::install("D:/WORK/SD_Lab/DNAModAnnot_Working_Directory/DNAModAnnot")
library(DNAModAnnot)
devtools::build_vignettes("D:/WORK/SD_Lab/DNAModAnnot_Working_Directory/DNAModAnnot")
